print("paren arithmetic tests");
x = (1 + 2) * 2;
print("6: " + x);

print("8: " + (1 + 3) * 2);

x =1 + 2 * (3 - 1) * 2 - 4 * (2 + 6) / 4;
print ("1: " + x);

print("1: " + (1 + 2 * (3 - 1) * 2 - 4 * (2 + 6) / 4));

print("dot access assignment tests");
x = {};
x.four = 4;
print("new property 4: " + x.four);
x = {};
x.one = {};
x.one.two = 2;
print("new deep property 2: " + x.one.two);

print("if else tests");
x = 4;
if x == 4 {
    print("x is 4");
}

if x != 4 {
    print("x is not 4");
} else if true {
    print("else if clause");
}

if false {} else {
    print("else clause");
}

print("begin builtins test (this is print test)");
print("5: " + len("hello"));
print("end builtins test");

print("being coercion tests");
print(true + ": true");
print("true: " + true);
print(false + ": false");
print("false: " + false);
print("1: " + 1);
print(1 + ": 1");
print("end coercion tests");

print("being loop tests");
x = 4;
for x > 0 {
    print("i'm going for 4!!!");
    x = x - 1;
}
print("end loop tests");

print("begin math tests");
x = 6 / 2 * 5 + 1;
print(x, 16);
x = 6 / 2 * 5;
print(x, 15);
x = 12 / 2 / 3;
print(x, 2);
x = 1 + 2 * 3;
print(x, 7);
x = 1 + 2 * 3 - 1;
print(x, 6);
x = 1 + 2 * 3 - 1 * 2 - 4 * 2 + 6 / 3;
print(x, -1);

print("end math tests");
print("all below should be true");
print(true && false == true && false);
print(true == true);
print(true || false);
print(false || false == true && false);
print(1 + 5 * 2 == 11);
print(1 + 2 * 3 - 1 * 2 - 4 * 2 + 6 / 3 == -1);
print("end bool tests");

print("begin func decl tests");
routine helloWithArg(arg1) {
    print(arg1);
}

routine hello() {}
routine helloWithBody() {
    print("helloWithBodyPrint");
}

routine helloWithMultilineStatement() {
    x = 1;
    x = x + 1;
    print(x);
}

routine captureTest() {
    y = 1;
    return routine innerCapture() {
        y = y + 1;
        print("y from inner: " + y);
    };
}

routine returnValue() {
    return "return value from func";
}
print("end func decls");
print("begin func calls");
captest = captureTest();
captest();
captest();
captest();
hello();
helloWithBody();
helloWithMultilineStatement();
helloWithArg("helloWithArgPrint");
print(returnValue());

print("end func calls");
print("begin object tests");
obj = {
    a: 1,
    b: "b"
};

print("obj.a: 1 : " + obj.a);
print("obj.b: b : " + obj.b);

obj2 = {
    a: {
        aa: 1
    },
    b: {
        bb: "b"
    }
};

print("obj2.a.aa: 1 : " + obj2.a.aa);
print("obj2.b.bb: b : " + obj2.b.bb);


obj.a = 2;
obj.b = true;

print("after change obj.a: 2 : " + obj.a);
print("after change obj.b: true : " + obj.b);

print("end object tests");

print("begin try/catch tests");
try {
    print(nonExistentVar);
} catch (e) {
    print("caught error: " + e);
} finally {
    print("finally block executed");
}
print("end try/catch tests");

print("array tests");
arr = [1, "two", 3, true, false];
print("arr[0]: 1 : " + arr[0]);
print("arr[1]: two : " + arr[1]);
print("arr[2]: 3 : " + arr[2]);
print("arr[3]: true : " + arr[3]);
print("arr[4]: false : " + arr[4]);

arr[0] = 5;
arr[1] = "six";
arr[2] = 7;
arr[3] = false;
arr[4] = true;

print("after change arr[0]: 5 : " + arr[0]);
print("after change arr[1]: six : " + arr[1]);
print("after change arr[2]: 7 : " + arr[2]);
print("after change arr[3]: false : " + arr[3]);    
print("after change arr[4]: true : " + arr[4]);

print("end array tests");
